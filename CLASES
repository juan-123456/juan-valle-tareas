Dcokerizar imagen IPFS 

mkdir -p clase17-sept-2020/01
cd clase17-sept-2020/01
 touch package.json Dockerfile index.js 
 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
package.json 

{
 "name": "ipfs",
 "version": "1.0.0",
 "description": "a ipfs connection for an easy example",
 "main": "index.js",
 "scripts": {
   "test": "echo \"Error: no test specified\" && exit 1",
   "start": "node index.js"
 },
 "keywords": [
   "ipfs",
   "file",
   "system",
   "docker"
 ],
 "author": "Data to bsn",
 "license": "MIT",
 "dependencies": {
   "ipfs-mini": "^1.1.5",
   "prompt": "^1.0.0"
 }
}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Dockerfile 

FROM node:10.15.0
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
CMD [ "npm", "start" ]

:::::::::::::::::::::::::::::::::::::::::::::::::::::::

index,js

const prompt = require('prompt');
const IPFS = require("ipfs-mini");
const ipfs = new IPFS({host: 'ipfs.infura.io', port:5001, protocol:'https'});
prompt.start();
prompt.get(['ipfs'], function (err, result) {
console.log('Command-line input received:');
console.log('  IPS: ' + result.ipfs);


ipfs.add(result.ipfs, (err,hash)=> {
   if(err){
   return console.log(err);
   }
   console.log('https://ipfs.infura.io/ipfs/'+hash)
})
});

:::::::::::::::::::::::::::::::::::::::::::::::::

construir contenedor

docker build -t ipfs:v1 .
lo corremos


docker run --rm -it --name=ipfs ipfs:v1


:::::::::::::::::::::::::::::::::::::::::::::::::

GIT cheatcheet

git add . 

git commit -m "aqui va el mensaje" 

git push origin master 


git status 


:::::::::::::::::::::::::::::::::::::::::::::::::
empieza 02

Static Website

vi Dockerfile

FROM nginx:alpine
COPY . /usr/share/nginx/html

vi index.html
<p>hola mundo</p>


docker build -t staticweb:v1 . 


docker run -it --name=static staticweb:v1


docker run -it -p 8080:80 --name=static staticweb:v1


http://localhost:8080/


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.
docker ps 
docker inspect <id>

::::::::::::::
corrimos la imagen en mysql y creamos la base de datos

 docker run --name=test-mysql mysql
 
 docker rm -f $(docker ps -aq) 


docker run --detach --name=test-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" mysql

luego para ver que se esta corriendo y compartida la base de datos

docker ps

::::::::::::::

Obtener la IP que nos asigna y acceder al contenedor

pero antes debes poner 
docker ps
y usar el id que nos da
      
                      ID
docker inspect 4785309c105b | jq '.[].NetworkSettings.IPAddress'

::::::::::::::::::::::::::::::::::::::::::::::
conectarnos a esa base de datos

sudo apt-get install mysql-client

debemos cambiar la ip que nos dieron pero debemos conectarnos a la base de datos primero aqui nos metera al mysql

mysql -uroot -pmypassword -h 172.17.0.2 -P 3306


::::::::::::::::::::::::::::::::::::::::::::::

empiza el 03

CREAR BD MYSQL con mi config

vim Dockerfile

FROM mysql:latest

ENV MYSQL_ROOT_PASSWORD=rootpwd
ENV MYSQL_DATABASE=db_name
ENV MYSQL_USER=db_username
ENV MYSQL_PASSWORD=db_pw


COPY *.sh /docker-entrypoint-initdb.d/
COPY *.sql /docker-entrypoint-initdb.d/

::::::::::::::::::::::::::::::::::::::::::::::::::::

ahora igestamos datos
 DE SEGUNDAS ESTO

vim test.sh
generamos la tabla de usuarios

CON ESTO DE SEGUNDAS

#!/bin/bash

echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "                          UTM DB                                "
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"


::::::::::::::::::::::::::::::::::::::::::::::::::::

PRIMERO ESTO

vim test.sql

LUEGO ESTOO


--
-- Table structure for table `user_details`
--

CREATE TABLE IF NOT EXISTS `user_details` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `gender` varchar(10) DEFAULT NULL,
  `password` varchar(50) DEFAULT NULL,
  `status` tinyint(10) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=10001 ;




--
-- Dumping data for table `user_details`
--

INSERT INTO `user_details` (`user_id`, `username`, `first_name`, `last_name`, `gender`, `password`, `status`) VALUES
(1, 'rogers63', 'david', 'john', 'Female', 'e6a33eee180b07e563d74fee8c2c66b8', 1),
(2, 'mike28', 'rogers', 'paul', 'Male', '2e7dc6b8a1598f4f75c3eaa47958ee2f', 1),
(3, 'rivera92', 'david', 'john', 'Male', '1c3a8e03f448d211904161a6f5849b68', 1),
(4, 'ross95', 'maria', 'sanders', 'Male', '62f0a68a4179c5cdd997189760cbcf18', 1),
(5, 'paul85', 'morris', 'miller', 'Female', '61bd060b07bddfecccea56a82b850ecf', 1),
(6, 'smith34', 'daniel', 'michael', 'Female', '7055b3d9f5cb2829c26cd7e0e601cde5', 1),
(7, 'james84', 'sanders', 'paul', 'Female', 'b7f72d6eb92b45458020748c8d1a3573', 1),
(8, 'daniel53', 'mark', 'mike', 'Male', '299cbf7171ad1b2967408ed200b4e26c', 1),
(9, 'brooks80', 'morgan', 'maria', 'Female', 'aa736a35dc15934d67c0a999dccff8f6', 1),
(10, 'morgan65', 'paul', 'miller', 'Female', 'a28dca31f5aa5792e1cefd1dfd098569', 1);

aqui agregamos el nombre para construir

docker build -t utmdb:v1 .
si queremos checar que imagenes tenemos
docker images
corremos la imagen
docker run utmdb:v1 

::::::::::::::::::::::::::::::::::::::::::::::::::::


docker ps 

docker inspect id | jq '.[].NetworkSettings.IPAddress'

mysql --host=ip --user=db_username --password=db_pw -P 3306 db_name

SHOW TABLES; 

SELECT * FROM user_details limit 4;

::::::::::::::::::::::::::::::::::::::::::::::::::::

WORDPRESS 

touch docker-compose.yml
    mkdir -p nginx/
    mkdir -p db-data/
    mkdir -p logs/nginx/
    mkdir -p wordpress/


vim nginx/wordpress.conf


server {
    listen 80;
    server_name wp-hakase.co;
 
    root /var/www/html;
    index index.php;
 
    access_log /var/log/nginx/hakase-access.log;
    error_log /var/log/nginx/hakase-error.log;
 
    location / {
        try_files $uri $uri/ /index.php?$args;
    }
 
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}


vim docker-compose.yml


nginx:
    image: nginx:latest
    ports:
        - '8080:80'
    volumes:
        - ./nginx:/etc/nginx/conf.d
        - ./logs/nginx:/var/log/nginx
        - ./wordpress:/var/www/html
    links:
        - wordpress
    restart: always
mysql:
    image: mariadb
    ports:
        - '3307:3306'
    volumes:
        - ./db-data:/var/lib/mysql
    environment:
        - MYSQL_ROOT_PASSWORD=aqwe123
    restart: always
wordpress:
    image: wordpress:4.7.1-php7.0-fpm
    ports:
        - '9000:9000'
    volumes:
        - ./wordpress:/var/www/html
    environment:
        - WORDPRESS_DB_NAME=wpdb
        - WORDPRESS_TABLE_PREFIX=wp_
        - WORDPRESS_DB_HOST=mysql
        - WORDPRESS_DB_PASSWORD=aqwe123
    links:
        - mysql
    restart: always
    
 para subir es git ad .
 luego git commit -m "nombre que quieras"
 luego git push origin master


:::::::::::::::::::::::::::::::::::::..

INSTALL docker-compose 
https://docs.docker.com/compose/install/

git apt install curl

sudo curl -L "https://github.com/docker/compose/releases/download/1.27.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose


sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

activamos
docker-compose up 

comprobmos
http://localhost:8080/

desactivamos

docker-compose down 

para borrar (no tan necesario)
sudo rm -rf db-data


ANTES DE SUBIR

sudo chmod-R 777 04 es para dar permisos completos

luego git ad .
luego git commit -m "dsda"
luego git push origin master


podemos estar en la princpial con ls ver cuales queremos subir y subir desde ahi

